-- =========================================
-- V2__soc2_auth_schema.sql
-- Enhances DB with SOC 2-compliant structures:
-- - Audit trails
-- - Enforced ownership
-- - Row-Level Security
-- - Role/Permission structure
-- =========================================

-- üéØ Ensure schemas exist
CREATE SCHEMA IF NOT EXISTS logs;
CREATE SCHEMA IF NOT EXISTS access;
CREATE SCHEMA IF NOT EXISTS internal;

-- üîê Create audit table
CREATE TABLE IF NOT EXISTS logs.audit_log (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    actor_id UUID,
    action TEXT NOT NULL,
    table_name TEXT,
    record_id UUID,
    payload JSONB,
    created_at TIMESTAMP DEFAULT now()
);

-- üéõÔ∏è Create permissions table
CREATE TABLE IF NOT EXISTS access.permissions (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    name TEXT NOT NULL UNIQUE,
    description TEXT,
    created_at TIMESTAMP DEFAULT now()
);

-- üîó Join table: role ‚Üî permission
CREATE TABLE IF NOT EXISTS access.role_permissions (
    role_id UUID NOT NULL REFERENCES auth.roles(id) ON DELETE CASCADE,
    permission_id UUID NOT NULL REFERENCES access.permissions(id) ON DELETE CASCADE,
    PRIMARY KEY (role_id, permission_id)
);

-- üë§ Join table: user ‚Üî role (auth.users already exists)
CREATE TABLE IF NOT EXISTS access.user_roles (
    user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    role_id UUID NOT NULL REFERENCES auth.roles(id) ON DELETE CASCADE,
    PRIMARY KEY (user_id, role_id)
);

-- ü™™ Set up basic RLS policies for auth.users
ALTER TABLE auth.users ENABLE ROW LEVEL SECURITY;

DROP POLICY IF EXISTS user_self ON auth.users;

CREATE POLICY user_self
    ON auth.users
    FOR SELECT
    USING (id = current_setting('request.jwt.claim.sub', true)::uuid);

-- üõ†Ô∏è Grant access to service account
GRANT USAGE ON SCHEMA logs, access TO slc_user_service;
GRANT SELECT, INSERT ON logs.audit_log TO slc_user_service;
GRANT SELECT ON access.permissions TO slc_user_service;
GRANT SELECT ON access.role_permissions TO slc_user_service;
GRANT SELECT ON access.user_roles TO slc_user_service;

-- üìã Grant full access to slc_admin
GRANT ALL ON SCHEMA logs, access TO slc_admin;
GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA logs, access TO slc_admin;
GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA logs, access TO slc_admin;

-- ‚ú≥Ô∏è Create index for audit log lookup
CREATE INDEX IF NOT EXISTS idx_audit_log_actor_id ON logs.audit_log(actor_id);
CREATE INDEX IF NOT EXISTS idx_user_roles_user_id ON access.user_roles(user_id);
CREATE INDEX IF NOT EXISTS idx_user_roles_role_id ON access.user_roles(role_id);
