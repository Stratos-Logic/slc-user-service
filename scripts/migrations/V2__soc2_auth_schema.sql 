-- ===============================
-- V2: SOC2 Enhancements and Auth Policies
-- ===============================

-- üîç Indexes for faster lookups
CREATE INDEX IF NOT EXISTS idx_users_email ON auth.users (email);
CREATE INDEX IF NOT EXISTS idx_roles_name ON auth.roles (name);
CREATE INDEX IF NOT EXISTS idx_audit_log_user_id ON soc2.audit_log (user_id);

-- üßë‚Äçüíº Add role-based RLS policy on users
DROP POLICY IF EXISTS select_all_users ON auth.users;

CREATE POLICY select_active_users FOR SELECT ON auth.users
    TO slc_user_service
    USING (is_active);

-- üßæ RLS on soc2.audit_log (optional based on access model)
ALTER TABLE soc2.audit_log
    ENABLE ROW LEVEL SECURITY;

-- üëÄ Read-only access for readonly_user on audit_log
GRANT SELECT ON soc2.audit_log TO readonly_user;

CREATE POLICY read_only_audit ON soc2.audit_log
    FOR SELECT
    TO readonly_user
    USING (true);

-- üõ†Ô∏è Add RLS enforcement on auth.roles and auth.user_roles
ALTER TABLE auth.roles
    ENABLE ROW LEVEL SECURITY;
CREATE POLICY roles_read_only FOR SELECT ON auth.roles
    TO slc_user_service
    USING (true);

ALTER TABLE auth.user_roles
    ENABLE ROW LEVEL SECURITY;
CREATE POLICY user_roles_read_only FOR SELECT ON auth.user_roles
    TO slc_user_service
    USING (true);

-- üõ°Ô∏è Apply more granular grants
GRANT SELECT ON auth.user_roles TO slc_user_service;
GRANT SELECT ON auth.roles TO readonly_user;
GRANT SELECT ON auth.users TO readonly_user;
